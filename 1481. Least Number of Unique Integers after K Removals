class Solution {
public:
    static bool cmp(pair<int,int> a, pair<int, int> b)
    {
        return a.second < b.second;
    }

    int findLeastNumOfUniqueInts(vector<int>& arr, int k) {
        unordered_map<int, int> m;

        for(int i=0;i<arr.size();i++)
        {
            m[arr[i]]++;
        }

        vector<pair<int, int>> v (m.begin(), m.end());
        sort(v.begin(), v.end(), cmp);

        for(pair<int,int> it : v)
        {
            if(k >= it.second)
            {
                k -= it.second;
                m.erase(it.first);
            }
        }

        return m.size();
    }
};

//Intuition:
// The crux of the qn is to delete elements with least frequency, i.e. unique elements must be deleted,
// thus, we created a map to store frequency of elements
// then sort the map in ascending order of frequency
// Now, as per value of k (no of elements to be deleted), start deleting elements starting from least freq,
// since, for sorting, we converted the map into a vector, 
// thus, for deletion: iterate through vector
// and if there is a chance to delete the element, remove the element from map,
// Condition to delete an element:
// k >= freq(element),
// bcoz, if k at any point is smaller than the least frequent element at that point of time,
// then there is no need to delete the element, bcoz anyhow it is going to stay there.