/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root, vector<int>& arr)
    {
        if(root==NULL)  return;
        inorder(root->left,arr);
        if(root->left == NULL && root->right == NULL)
        {
            arr.push_back(root->val);
        }
        inorder(root->right,arr);
    }

    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> vec1;
        vector<int> vec2;
        inorder(root1,vec1);
        inorder(root2,vec2);

        if(vec1.size() == vec2.size()){
            for(int i=0;i<vec1.size();i++)
            {
                if(vec1[i]!=vec2[i])
                    return false;
            }
            return true;
        }
        return false;

    }
};

//Intution:
// Save all the leaf nodes in two vectors for the two trees respectively,
// then compare the two vectors.